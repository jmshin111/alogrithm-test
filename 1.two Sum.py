from typing import List

nums = [2,7,11,15]
nums = [3,2,4]
nums = [2,7,11,15]
target = 9

nums = [3,2,3]
target = 6

nums = [1931729,5896941,-56160,-5999108,-713650,3135403,870300,-2938196,-726482,-152831,-5552046,-6857780,2493109,-2409591,7453630,7848984,-806578,4976647,-9199319,-7660981,4168359,5466164,8577624,-7465790,-7808993,-7176396,-3622579,4996177,9623530,-1371773,-5633028,5188756,7971646,-2603602,7490338,3174208,-1825054,6892503,-8201151,-1072749,-2746872,-718104,-1804706,5504856,-9104958,-2181797,3151933,-6116343,1436458,-659793,-9256591,-3487143,3396195,-6211129,-2789647,-9336842,-122743,-3843085,8515885,-8551842,-8668581,-5040156,-9626107,-5645393,-5484621,-6417906,4483313,-4197219,-5762688,-6645419,1077632,7237401,4819732,5220382,8657346,651862,7406097,6668849,5067699,4563307,-4358391,-3996666,-4298897,-9870277,-628517,1842975,-4970541,-8815324,-4174656,-9332000,4647373,9461387,-3504914,2614670,-1315721,6099266,-8562834,-4488116,9742133,307556,791291,-2611787,7656675,9932436,-1905766,5142745,7210001,-4678645,550797,8462302,6815722,-2985059,-1236401,-6093644,-6617192,-9438320,8400183,8936598,5378080,9758788,817106,8613435,3579880,-9100698,993960,5352546,8481471,3526666,2961295,-7819498,834324,3435605,9725655,8490290,7263645,-6863345,2947003,-8152353,5514173,-9865666,343864,-6386758,-8675825,-3252881,1149651,6690889,7528843,-2861961,-4722247,-6985318,-9994086,7192089,-4864512,5773490,-9492163,-2089496,2246943,430576,3466065,1578813,2738295,261493,-425120,3666399,8796329,9220040,7148637,5956722,9980401,7834421,2041136,3763240,-831391,7963736,8744496,9593751,4606042,66708,-6652782,-6619264,2614784,5655774,-9547771,2456855,4268450,864132,4601358,-3464052,-8987625,-4427713,-126397,-5823810,8443040,-7428684,-4365060,-6392451,-6258724,-9124302,-6566562,-4153846,-9120859,7061892,-7707777,9342864,-2133124,-7068189,-8657201,2752682,-9943634,-8650517,-5219095,2305245,-1500154,8915790,-2805210,1860598,3361037,-8040669,5809813,-2243400,-3418428,-1810675,-5203397,-7879177,6898143,7749161,-2810814,-7525359,-793458,608571,-9383497,9531109,6862130,-3381989,2332039,6018975,-3350279,7266303,-7170480,-1127784,578313,6018329,8822950,4214273,-372530,2706552,-4905224,3324641,-5403812,9319424,-2882974,-9228107,6151855,2634284,7000575,3215247,5067619,5076150,1595871,748735,-9225927,1962290,4653714,697462,2996679,-7562085,-5387705,-912530,1763635,-6139098,2103001,-6316004,-3469182,-3818553,8854173,422707,-3826706,-9777012,7452324,3665456,-9458220,4828502,2641583,5107388,-4201437,5486625,-9315573,1417427,-1838955,9042987,-9704280,7868946,-6737802,4462332,-5771637,635858,1438260,8940144,9385885,3522022,-9736738,-4387243,-8611088,8733735,-2087884,8299364,-1004025,2674570,4247204,1972151,-2092476,-1318052,-796315,-6487458,8714867,-9966767,-5459861,-1286737,9442201,-2065902,2575270,7184243,5916475,-5728128,-3044939,6372732,4902791,3474374,-7462481,-9886552,-8361835,-5022392,-4583670,3990789,-1051830,8606314,6365011,6751820,1727390,-2005234,-5845824,9572998,6867269,4000416,5629823,-2918551,7278467,9865305,3781390,-1518411,-7124219,3800842,-4492377,-7479001,4144917,4639464,7161451,3391326,-2429792,8240315,-8667371,101661,-6049927,-9729041,-2210443,-6907416,-1355534,6292201,-1169114,-4565077,3214740,-6122903,8326559,-3973709,2313703,9645383,6119383,8317176,8177731,7758979,3037198,-9543017,-3436171,3280360,-1444577,-40402,-8372623,6672469,9125222,6161730,3783090,-2778572,-8014616,-1588372,-3200391,7126312,-5091311,-3637052,-6600914,9034974,-6246289,-4974981,-9711741,-7867786,-9808240,450272,-3222991,-8251454,3599528,-33487,-1114626,8414308,-2607016,1690025,5981016,-2898849,-4650973,-8085619,-4875585,-2677275,-7329644,-9730701,-5563788,4635028,-4232606,1863619,-9081061,-8966306,4907349,348942,-6309867,2436213,-6340842,8276407,-1112458,4073087,6632641,-6044509,-1714553,-9905887,8140713,-5566484,-8187046,-3636448,560425,9931445,-8142363,1928694,6652925,5094575,5525595,9847315,5323311,9123454,7425631,2116547,9033708,-2228326,2858537,5452249,-3388576,8859366,5965629,-9904937,8961420,-8794807,4363288,-1067547,1903643,-6637956,3736544,9150157,-3977433,4333094,-1170635,-4933425,5815702,1846616,793301,-9206787,-227043,-7076926,-461803,-7477454,-1297664,47425,8506054,8264895,-1199514,-4031592,1245359,2840097,6948011]
target =7828670


nums = [-2489365,-993808,7677553,-6236212,4790337,7644796,-17608,-5925223,1001245,-460212,653772,5293761,3423463,7887896,6682993,-7160383,-8961165,-4427439,-292075,-7135767,4083793,-6960662,8142868,-4240394,8025016,-2556360,2350768,-4461693,-4560806,-3584319,-260547,7555881,5425240,-4005238,1884863,-1542675,-7228114,-1569944,1127787,2957411,-1242460,8952147,-4274786,-3547360,-2021990,3996052,-5990652,-2548871,-5738166,2898644,-3621230,-8941983,-2947855,6725035,4132935,2365022,-779089,7301765,7592999,1348187,5460485,-6122562,6040748,4998516,1711224,2502134,-3494412,1734467,-2483280,-5130317,-172673,5886671,-7923584,337280,3523150,7822530,-6359601,3438172,1810201,6740543,-6990467,-8944667,107690,4556956,6905123,6842712,7038959,-1623617,5486272,133419,-3934378,-888166,4176021,7922519,5245309,9130043,8978076,8808437,8416577,4767255,-7278336,-8728641,-9003137,-9503175,5550490,8968777,1768371,7942934,9782721,-5302342,-3076168,3328396,-4620783,-3322865,1164363,4994489,7320876,4031038,-2036888,5034601,-9098927,-9056762,-9827598,-2762269,-7689012,7127061,4020330,6512128,-1156246,3571495,5388307,-4969113,2118509,5411790,-9655083,-572819,-4186494,7775941,478500,-8289896,3328444,4329332,4091188,-5611161,-2027703,4289457,-7329518,-9739740,6560991,9112308,2164824,-8818714,7239204,-5603429,-5659909,-8668315,-1874581,-5978467,5705017,651321,747667,7180173,8158904,-6695904,9732873,4714316,1865646,-1738344,-442627,8001906,366162,7747907,1328022,3241603,7556153,9977970,4545917,433814,5136053,6971048,-1483172,9258771,-2769108,2495273,3170658,-7277004,-2903161,-5104774,-5831707,-9250574,-4276957,664375,-8734748,-3773330,-5538367,4637853,-932667,6308513,-3599717,-3201277,-1702967,-4275762,-9321013,2276903,-7321002,-7787434,1793680,-2797948,-1421363,1819511,4398558,6193158,-9003006,5047133,7630486,1308811,-3001765,-6857856,8649103,2216541,724938,-5524269,-1623261,8654301,-6057258,5861629,-5032170,-6895815,-1003619,-2450585,2544057,6390889,4655893,194459,-2940491,-9399918,-2225728,6667900,6731612,-2019387,-410708,7226727,-6954899,5162041,4600893,-9684418,7979363,3272380,2640858,-3424552,-9430055,-4546570,-3273081,-1684766,9237395,-6489178,1425283,-2230845,351271,-4355198,-2924300,877195,-13620,-5765150,4715114,7839148,8982768,2223961,9345644,-3263152,7617224,6533515,2881695,5836797,-7156020,-2440178,2364641,-6990073,8994440,5422913,-7575952,-2922731,5926480,-7758037,3850264,1040662,-6126638,4972693,7217650]
target = -3483173

class Solution:
    def binarySearch(self,nums_maxtrix,target):
        middle = int(len(nums_maxtrix)/2)
        #print('middle',middle)
        #print(nums_maxtrix,middle)
        if(nums_maxtrix[middle][0]==target):
            return nums_maxtrix[middle][1]
        elif(nums_maxtrix[middle][0]>target):
            if(middle >0):
                return Solution.binarySearch(Solution,nums_maxtrix[0:middle],target)
            else:
                return -1
        elif(nums_maxtrix[middle][0]<target):
            if middle >0:
                return Solution.binarySearch(Solution, nums_maxtrix[middle:],target)
            else:
                return -1
        else:
            return -1

    def twoSum(self, nums: List[int], target: int) -> List[int]:
        result = []
        nums_maxtrix = []

        maximum_index = -1

        for i in range(len(nums)):
            nums_maxtrix.append([nums[i], i])

        nums_maxtrix.sort(key=lambda x:x[0])
        print(nums_maxtrix)
        for i in range(len(nums_maxtrix)):
            if nums_maxtrix[i][0] > target:
                maximum_index = i
                break
        if maximum_index == -1:
            maximum_index = len(nums)-1

        maximum_index = len(nums)-1

        for i in range(maximum_index+1):
            return_index = Solution.binarySearch(Solution, nums_maxtrix, target - nums_maxtrix[i][0])

            if(-1 != return_index and return_index != nums_maxtrix[i][1]):
                result.append(nums_maxtrix[i][1])
                result.append(return_index)
                break

         #   print('result',result)
        return result

print(Solution.twoSum(Solution,nums,target))
