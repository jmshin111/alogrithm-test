import csv
import sys
from functools import lru_cache
from typing import List, Counter






# nums = [6, 10, 3]
nums = [13,7,4,16,1]

nums = [88781,44963,67626,127346,6399,169461,109232,149581,4958,16338,181326,93047,152063,36251,155595,32802,36306,67925,72592,104281,147869,105142,45135,160549,23396,61219,127402,1961,46552,138596,83163,131308,170090,114903,179966,167540,191738,59174,62489,82048,129781,180080,125522,58999,186869,108068,88330,146908,160246,190899,171287,72149,169454,57533,12635,18757,134137,169159,96650,41804,134122,53437,81738,78308,181550,78530,144787,97417,43301,183838,183836,193048,121839,155866,22276,32308,158887,134730,149746,98881,46210,40837,65693,111871,57048,149296,188639,198640,13667,129769,178687,103182,187998,166979,91222,100658,135019,43201,142665,191338,10672,137410,23699,66895,164745,26489,70131,193176,21947,36472,161718,172941,179996,183608,21498,116670,63175,100232,113488,104135,43190,85320,114853,33117,163160,127918,55579,31245,113053,157465,140000,107014,30957,173149,77458,72791,65069,99314,196498,146637,1051,49766,138508,115022,151804,5515,8077,164503,158762,63502,68262,54161,45313,74654,38905,142172,52547,71625,81563,153548,198554,65768,179183,117021,44035,142968,93574,128663,110092,31930,54774,149565,100469,53693,74462,28349,6331,30952,149241,195892,3465,142944,77703,176663,199509,189876,170233,35808,19709,131170,97971,150098,81593,114602,131867,177541,93538,198866,138516,84853,222,32480,115951,188211,117848,91807,79902,141374,104702,88963,191663,179153,149794,129054,29648,169783,98975,100241,53455,145985,1016,72777,166602,156806,189344,193611,190941,133946,52136,121001,157505,135506,107208,195201,186681,80043,184259,44647,117805,162539,175333,139187,51738,94221,137938,923,177878,102017,151873,111640,106235,88084,162956,153205,192370,183371,196287,17760,129159,195499,64916,167866,170065,76255,165066,5447,106693,189081,164958,40917,166130,104155,70847,46702,19245,158719,2656,91607,69359,185604,107778,179578,142672,79605,39865,121130,67988,127021,44466,122449,133780,11899,70994,133768,25856,195232,154832,110782,18286,93108,17564,172188,115995,5176,43028,132950,186187,42370,180997,24394,105362,166717,180594,72299,158596,79798,54760,138437,54450,62190,87542,70535,17972,19631,183290,137154,172697,96524,122667,134092,146185,193129,13040,44186,77825,171198,192699,187024,145816,70717,93285,159821,193946,60848,102908,147075,104784,45184,126780,68033,160014,86415,187709,58280,67835,159895,185255,64023,173236,8005,163173,105539,82977,113185,199648,65124,70541,49782,19016,164073,191975,43419,151820,116281,152420,190906,38845,158928,68678,120427,138044,42608,36339,36202,187630,115522,94658,81203,196969,105056,63044,30366,188261,54052,188345,178625,80084,17886,27889,59670,104074,84246,129070,26208,48959,11792,14508,156635,6104,197245,56770,179123,9100,129620,184530,138553,189783,160742,115943,89770,173782,71979,30951,160758,181571,45270,24965,58214,104781,61137,129768,117917,99063,196769,44197,60744,61797,74355,121262,143398,152026,102130,55551,118410,187416,67601,86539,130111,155614,29084,56059,20671,12116,4041,1371,125934,83775,100440,152111,75292,51350,104839,41961,198853,169357,39918,7985,3980,101521,38058,174277,142233,14974,148045,99481,66629,34074,20846,121344,170959,79535,3786,9299,140767,15952,137601,33797,11224,71721,30786,113380,23865,49837,7242,130984,167121,34161,195197,73210,180033,50313,173806,117314,102159,86457,165430,70248,68117,168193,166621,63726,64337,15777,154122,154795,45948,91650,112322,158690,182992,146869,167348,136885,15940,92597,143374,108174,141059,52264,186555,140616,111181,173641,18373,187052,70018,194848,160082,189037,197187,18949,65951,46552,25315,39587,15391,53307,112225,11772,13845,167018,23913,134438,122990,131368,97060,26027,81970,10517,33195,139321,8700,116222,174131,33608,103597,185506,116939,6454,193102,137498,70777,23692,65539,85306,22489,79126,8964,100726,15247,192049,68422,82106,192734,34081,68237,99663,30707,177680,79625,24657,111367,64328,131791,146061,53848,86536,88779,133516,102523,153129,126132,27444,34007,171069,117601,137297,146446,188582,152401,183838,136336,140410,7935,76370,194820,41165,52423,97086,102037,136598,84993,25528,107349,90540,33127,150709,17004,11423,78774,170687,139902,82222,109469,78204,83572,92437,71479,85273,196277,196219,136342,131350,2258,137922,31946,38996,83129,190528,85347,85870,150238,18048,118441,73299,125750,119051,95464,194416,99754,20492,151773,14707,35280,12774,137288,129021,150892,66039,64321,184266,150415,195730,88775,94786,168690,97029,105533,80580,121785,156831,89248,139495,133050,43988,7622,38891,65569,180157,57969,147529,34972,29560,48392,107770,190831,162452,13135,26011,143055,178604,69660]
nums=[5,15,40,5,6]

nums = [5852,6671,170275,141929,2414,99931,179958,56781,110656,190278,7613,138315,58116,114790,129975,144929,61102,90624,60521,177432,57353,199478,120483,75965,5634,109100,145872,168374,26215,48735,164982,189698,77697,31691,194812,87215,189133,186435,131282,110653,133096,175717,49768,79527,74491,154031,130905,132458,103116,154404,9051,125889,63633,194965,105982,108610,174259,45353,96240,143865,184298,176813,193519,98227,22667,115072,174001,133281,28294,42913,136561,103090,97131,128371,192091,7753,123030,11400,80880,184388,161169,155500,151566,103180,169649,44657,44196,131659,59491,3225,52303,141458,143744,60864,106026,134683,90132,151466,92609,120359,70590,172810,143654,159632,191208,1497,100582,194119,134349,33882,135969,147157,53867,111698,14713,126118,95614,149422,145333,52387,132310,108371,127121,93531,108639,90723,416,141159,141587,163445,160551,86806,120101,157249,7334,60190,166559,46455,144378,153213,47392,24013,144449,66924,8509,176453,18469,21820,4376,118751,3817,197695,198073,73715,65421,70423,28702,163789,48395,90289,76097,18224,43902,41845,66904,138250,44079,172139,71543,169923,186540,77200,119198,184190,84411,130153,124197,29935,6196,81791,101334,90006,110342,49294,67744,28512,66443,191406,133724,54812,158768,113156,5458,59081,4684,104154,38395,9261,188439,42003,116830,184709,132726,177780,111848,142791,57829,165354,182204,135424,118187,58510,137337,170003,8048,103521,176922,150955,84213,172969,165400,111752,15411,193319,78278,32948,55610,12437,80318,18541,20040,81360,78088,194994,41474,109098,148096,66155,34182,2224,146989,9940,154819,57041,149496,120810,44963,184556,163306,133399,9811,99083,52536,90946,25959,53940,150309,176726,113496,155035,50888,129067,27375,174577,102253,77614,132149,131020,4509,85288,160466,105468,73755,4743,41148,52653,85916,147677,35427,88892,112523,55845,69871,176805,25273,99414,143558,90139,180122,140072,127009,139598,61510,17124,190177,10591,22199,34870,44485,43661,141089,55829,70258,198998,87094,157342,132616,66924,96498,88828,89204,29862,76341,61654,158331,187462,128135,35481,152033,144487,27336,84077,10260,106588,19188,99676,38622,32773,89365,30066,161268,153986,99101,20094,149627,144252,58646,148365,21429,69921,95655,77478,147967,140063,29968,120002,72662,28241,11994,77526,3246,160872,175745,3814,24035,108406,30174,10492,49263,62819,153825,110367,42473,30293,118203,43879,178492,63287,41667,195037,26958,114060,99164,142325,77077,144235,66430,186545,125046,82434,26249,54425,170932,83209,10387,7147,2755,77477,190444,156388,83952,117925,102569,82125,104479,16506,16828,83192,157666,119501,29193,65553,56412,161955,142322,180405,122925,173496,93278,67918,48031,141978,54484,80563,52224,64588,94494,21331,73607,23440,197470,117415,23722,170921,150565,168681,88837,59619,102362,80422,10762,85785,48972,83031,151784,79380,64448,87644,26463,142666,160273,151778,156229,24129,64251,57713,5341,63901,105323,18961,70272,144496,18591,191148,19695,5640,166562,2600,76238,196800,94160,129306,122903,40418,26460,131447,86008,20214,133503,174391,45415,47073,39208,37104,83830,80118,28018,185946,134836,157783,76937,33109,54196,37141,142998,189433,8326,82856,163455,176213,144953,195608,180774,53854,46703,78362,113414,140901,41392,12730,187387,175055,64828,66215,16886,178803,117099,112767,143988,65594,141919,115186,141050,118833,2849]
nums= list(range(1,100))
print(nums)
class Solution:

    def countDifferentSubsequenceGCDs(self, nums: List[int]) -> int:
        gcd_group = {}
        sys.setrecursionlimit(20000000)
        @lru_cache
        def findgcd(a: int, b: int) -> int:
            if a > b:
                if a % b == 0:
                    return b
                else:
                    return findgcd(b, a % b)

            else:
                if b % a == 0:
                    return a
                else:
                    return findgcd(a, b % a)

        print(findgcd(6, 4))
        visited= set()
        @lru_cache
        def dfsGcd(start_index: int)->set():

            print(start_index)
            gcd_set = set()
            if start_index >= len(nums):
                return gcd_set
            gcd_set.add(nums[start_index])
            if start_index == len(nums)-1:
                return gcd_set

            return_gcd_group = set()
            for i in range(start_index, len(nums)):
                if i+1 not in visited:
                    temp_gcd_group = dfsGcd(i + 1)
                    print(temp_gcd_group)
                visited.add(i+1)

                return_gcd_group = return_gcd_group.union(temp_gcd_group)

            for i in return_gcd_group:
                gcd = findgcd(i,nums[start_index])
                gcd_set.add(gcd)

            gcd_set = gcd_set.union(return_gcd_group)

            return gcd_set

        gcd_group = dfsGcd(0)
        print(gcd_group)
        return len(gcd_group)

print(Solution.countDifferentSubsequenceGCDs(Solution, nums))
